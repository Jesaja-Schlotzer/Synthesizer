package audio.components.oscillators;

import audio.enums.SampleRate;
import audio.modules.io.InputPort;
import audio.modules.io.Port;

/**
 * An <code>Oscillator</code> implementation that generates a square wave.
 * The <code>SquareOscillator</code> has an additional pulse width value.
 */
public class SquareOscillator extends Oscillator {

    @InputPort
    private Port pulseWidthInputPort = Port.NULL;

    /**
     * Sets the <code>pulseWidthInputPort</code> which controls the pulse width of the square wave.
     * @param pulseWidthInputPort the <code>Port</code> to be set
     */
    public void setPulseWidthInputPort(Port pulseWidthInputPort) {
        if (pulseWidthInputPort != null) {
            this.pulseWidthInputPort = () -> Math.min(Math.max(pulseWidthInputPort.out(), -1), 1);
        }
    }


    /**
     * Constructs an <code>SquareOscillator</code> and sets the <code>InputPort</code>s and the sample rate of the <code>Oscillator</code>.
     * The pulse width of the <code>Oscillator</code>
     * @param frequencyInputPort the <code>frequencyInputPort</code> of the <code>Oscillator</code>
     * @param amplitudeInputPort the <code>amplitudeInputPort</code> of the <code>Oscillator</code>
     * @param sampleRate the <code>sampleRate</code> of the <code>Oscillator</code>
     */
    public SquareOscillator(Port frequencyInputPort, Port amplitudeInputPort, SampleRate sampleRate) {
        super(frequencyInputPort, amplitudeInputPort, sampleRate);
    }

    /**
     * Constructs an <code>SquareOscillator</code> and sets a constant frequency and amplitude and the sample rate of the <code>Oscillator</code>.
     * @param frequency the frequency of the <code>Oscillator</code>
     * @param amplitude the amplitude of the <code>Oscillator</code>
     * @param sampleRate the <code>sampleRate</code> of the <code>Oscillator</code>
     */
    public SquareOscillator(double frequency, double amplitude, SampleRate sampleRate) {
        super(frequency, amplitude, sampleRate);
    }

    /**
     * Constructs an <code>SquareOscillator</code> and sets the <code>InputPort</code>s and the sample rate of the <code>Oscillator</code>.
     * The pulse width of the <code>Oscillator</code>
     * @param frequencyInputPort the <code>frequencyInputPort</code> of the <code>Oscillator</code>
     * @param amplitudeInputPort the <code>amplitudeInputPort</code> of the <code>Oscillator</code>
     * @param sampleRate the <code>sampleRate</code> of the <code>Oscillator</code>
     * @param pulseWidthInputPort the <code>pulseWidthInputPort</code> of the <code>Oscillator</code>
     */
    public SquareOscillator(Port frequencyInputPort, Port amplitudeInputPort, SampleRate sampleRate, Port pulseWidthInputPort) {
        super(frequencyInputPort, amplitudeInputPort, sampleRate);
        setPulseWidthInputPort(pulseWidthInputPort);
    }

    /**
     * Constructs an <code>SquareOscillator</code> and sets a constant frequency, amplitude and pulse width and the sample rate of the <code>Oscillator</code>.
     * @param frequency the frequency of the <code>Oscillator</code>
     * @param amplitude the amplitude of the <code>Oscillator</code>
     * @param sampleRate the <code>sampleRate</code> of the <code>Oscillator</code>
     * @param pulseWidth the <code>pulseWidth</code> of the <code>Oscillator</code>
     */
    public SquareOscillator(double frequency, double amplitude, SampleRate sampleRate, double pulseWidth) {
        super(frequency, amplitude, sampleRate);
        this.pulseWidthInputPort = (pulseWidth >= -1 && pulseWidth <= 1 ? () -> pulseWidth : Port.NULL);
    }


    /**
     * @return the next audio sample generated by the <code>Oscillator</code>
     */
    @Override
    protected double next() {
        if(Math.sin(t) < pulseWidthInputPort.out()) {
            t += (2 * Math.PI * frequencyInputPort.out()) / sampleRate;
            return -amplitudeInputPort.out();
        }else {
            t += (2 * Math.PI * frequencyInputPort.out()) / sampleRate;
            return amplitudeInputPort.out();
        }
    }




    @Override
    public boolean equals(Object obj) {
        if (obj instanceof SquareOscillator osc) {
            return osc.frequencyInputPort == this.frequencyInputPort &&
                    osc.amplitudeInputPort == this.amplitudeInputPort &&
                    osc.sampleRate == this.sampleRate &&
                    osc.pulseWidthInputPort == this.pulseWidthInputPort;
        }
        return false;
    }


    @Override
    public String toString() {
        return "Oscillator[Type=Square, Frequency="+ frequencyInputPort.out()
                +", Amplitude="+ amplitudeInputPort.out()
                +", SampleRate="+ sampleRate +", Threshold="+pulseWidthInputPort.out()+"]";
    }
}
